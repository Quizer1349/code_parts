//
//  RadarDrawer.swift
//  MyCrRadar
//
//  Created by Alexey Sklyarenko on 17.09.15.
//  Copyright (c) 2015 Seanetix. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import WatchKit
import Foundation

public class RadarDrawer : NSObject {
    
    //// Cache
    
    private struct Cache {
        static let gradientColor: UIColor = UIColor(red: 0.020, green: 0.162, blue: 0.020, alpha: 1.000)
        static let color2: UIColor = UIColor(red: 0.383, green: 1.000, blue: 0.425, alpha: 1.000)
    }
    
    //// Colors
    
    public class var gradientColor: UIColor { return Cache.gradientColor }
    public class var color2: UIColor { return Cache.color2 }
    
    //// Drawing Methods
    
    private class func drawRadar(radarHandAngle radarHandAngle: CGFloat = 0, distanceText: String = "") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()
        
        //// Color Declarations
        let gradient2Color = UIColor(red: 0.013, green: 0.147, blue: 0.044, alpha: 1.000)
        let gradient2Color2 = UIColor(red: 0.211, green: 0.587, blue: 0.287, alpha: 1.000)
        let shadow3Color = UIColor(red: 0.014, green: 0.197, blue: 0.048, alpha: 1.000)
        
        //// Gradient Declarations
        let gradient2 = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradient2Color.CGColor, gradient2Color.blendedColorWithFraction(0.5, ofColor: gradient2Color2).CGColor, gradient2Color2.CGColor, gradient2Color2.blendedColorWithFraction(0.5, ofColor: UIColor.whiteColor()).CGColor, UIColor.whiteColor().CGColor], [0, 0.4, 0.56, 0.71, 0.95])!
        let gradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [UIColor.clearColor().CGColor, UIColor.clearColor().blendedColorWithFraction(0.5, ofColor: RadarDrawer.color2).CGColor, RadarDrawer.color2.CGColor], [0, 0.51, 0.86])!
        let gradient3 = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [RadarDrawer.color2.CGColor, RadarDrawer.color2.blendedColorWithFraction(0.5, ofColor: UIColor.clearColor()).CGColor, UIColor.clearColor().CGColor], [0, 0.27, 0.56])!
        
        //// Shadow Declarations
        let shadow = DrawerShadow()
        shadow.shadowColor = RadarDrawer.color2
        shadow.shadowOffset = CGSizeMake(0.1, -0.1)
        shadow.shadowBlurRadius = 2
        let shadow2 = DrawerShadow()
        shadow2.shadowColor = RadarDrawer.color2
        shadow2.shadowOffset = CGSizeMake(0.1, -0.1)
        shadow2.shadowBlurRadius = 5
        let shadow3 = DrawerShadow()
        shadow3.shadowColor = shadow3Color
        shadow3.shadowOffset = CGSizeMake(0.1, -0.1)
        shadow3.shadowBlurRadius = 4
        
        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRectMake(4, 4, 152, 152))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow3.shadowOffset, shadow3.shadowBlurRadius, shadow3.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        ovalPath.addClip()
        CGContextDrawRadialGradient(context, gradient2,
            CGPointMake(80, 80), 14.01,
            CGPointMake(80, 80), 176.53,
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
        
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, shadow.shadowColor.CGColor)
        RadarDrawer.gradientColor.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()
        CGContextRestoreGState(context)
        
        
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(79, 78.5, 2, 2))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, shadow.shadowColor.CGColor)
        RadarDrawer.color2.setFill()
        oval2Path.fill()
        CGContextRestoreGState(context)
        
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(80, 4.96))
        bezierPath.addCurveToPoint(CGPointMake(80, 155.04), controlPoint1: CGPointMake(80, 154.11), controlPoint2: CGPointMake(80, 155.04))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, shadow.shadowColor.CGColor)
        RadarDrawer.color2.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
        CGContextRestoreGState(context)
        
        
        //// Bezier 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4.48, 79.52)
        CGContextRotateCTM(context, -90 * CGFloat(M_PI) / 180)
        
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(0, 0))
        bezier2Path.addCurveToPoint(CGPointMake(0, 150.09), controlPoint1: CGPointMake(0, 149.15), controlPoint2: CGPointMake(0, 150.09))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, shadow.shadowColor.CGColor)
        RadarDrawer.color2.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()
        CGContextRestoreGState(context)
        
        CGContextRestoreGState(context)
        
        
        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalInRect: CGRectMake(57, 57.5, 45, 45))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, shadow.shadowColor.CGColor)
        RadarDrawer.color2.setStroke()
        oval3Path.lineWidth = 1
        oval3Path.stroke()
        CGContextRestoreGState(context)
        
        
        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalInRect: CGRectMake(42, 42.5, 75, 75))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, shadow.shadowColor.CGColor)
        RadarDrawer.color2.setStroke()
        oval4Path.lineWidth = 1
        oval4Path.stroke()
        CGContextRestoreGState(context)
        
        
        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalInRect: CGRectMake(28, 28.5, 103, 103))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, shadow.shadowColor.CGColor)
        RadarDrawer.color2.setStroke()
        oval5Path.lineWidth = 1
        oval5Path.stroke()
        CGContextRestoreGState(context)
        
        
        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalInRect: CGRectMake(12, 12.5, 135, 135))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, shadow.shadowColor.CGColor)
        RadarDrawer.color2.setStroke()
        oval6Path.lineWidth = 1
        oval6Path.stroke()
        CGContextRestoreGState(context)
        
        
        //// Bezier 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 80, 80)
        CGContextRotateCTM(context, -radarHandAngle * CGFloat(M_PI) / 180)
        
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(-0.07, 0))
        bezier3Path.addLineToPoint(CGPointMake(0, -75.04))
        bezier3Path.addLineToPoint(CGPointMake(-17.99, -73.36))
        bezier3Path.addLineToPoint(CGPointMake(-0.07, 0))
        bezier3Path.closePath()
        bezier3Path.lineCapStyle = .Round;
        
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow2.shadowOffset, shadow2.shadowBlurRadius, shadow2.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        bezier3Path.addClip()
        CGContextDrawLinearGradient(context, gradient, CGPointMake(-16.72, -36.94), CGPointMake(1.31, -37.57), CGGradientDrawingOptions())
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
        
        
        CGContextRestoreGState(context)
        
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(56.58, 151.68))
        rectanglePath.addCurveToPoint(CGPointMake(60.5, 153), controlPoint1: CGPointMake(56.58, 151.68), controlPoint2: CGPointMake(57.17, 152.14))
        rectanglePath.addCurveToPoint(CGPointMake(80, 155.5), controlPoint1: CGPointMake(63.71, 153.83), controlPoint2: CGPointMake(69.44, 155.5))
        rectanglePath.addCurveToPoint(CGPointMake(99, 153), controlPoint1: CGPointMake(89.95, 155.5), controlPoint2: CGPointMake(96, 154))
        rectanglePath.addCurveToPoint(CGPointMake(103.42, 151.68), controlPoint1: CGPointMake(102.85, 152.1), controlPoint2: CGPointMake(103.42, 151.68))
        rectanglePath.addLineToPoint(CGPointMake(103.42, 136.88))
        rectanglePath.addLineToPoint(CGPointMake(56.58, 136.88))
        rectanglePath.addLineToPoint(CGPointMake(56.58, 151.68))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        rectanglePath.addClip()
        CGContextDrawLinearGradient(context, gradient3, CGPointMake(80, 155.5), CGPointMake(80, 136.88), CGGradientDrawingOptions())
        CGContextRestoreGState(context)
        
        
        //// Text Drawing
        let textRect = CGRectMake(58, 144.5, 44, 10)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, shadow.shadowColor.CGColor)
        let textStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = .Center
        
        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(11), NSForegroundColorAttributeName: gradient2Color, NSParagraphStyleAttributeName: textStyle]
        
        let textTextHeight: CGFloat = NSString(string: distanceText).boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect);
        NSString(string: distanceText).drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)
        CGContextRestoreGState(context)
    }

    
    public class func drawRadarImage(radarHandAngle radarHandAngle:CGFloat, distanceText: String, size:CGSize) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()
        
        //// Symbol Drawing
        let symbolRect = CGRectMake(0.15, 0.15, size.width, size.height)
        CGContextSaveGState(context)
        
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)
        CGContextScaleCTM(context, symbolRect.size.width / 160, symbolRect.size.height / 160)
        
        RadarDrawer.drawRadar(radarHandAngle: radarHandAngle, distanceText: distanceText)
        
        CGContextRestoreGState(context)
    }
    
}



extension UIColor {
    
    func blendedColorWithFraction(fraction: CGFloat, ofColor color: UIColor) -> UIColor {
        var r1: CGFloat = 1.0, g1: CGFloat = 1.0, b1: CGFloat = 1.0, a1: CGFloat = 1.0
        var r2: CGFloat = 1.0, g2: CGFloat = 1.0, b2: CGFloat = 1.0, a2: CGFloat = 1.0
        
        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)
        
        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}

class DrawerShadow: NSObject  {

    var shadowColor:UIColor = UIColor.blackColor()
    var shadowOffset:CGSize = CGSizeMake(0, -1)
    var shadowBlurRadius:CGFloat = 0
    
    override init(){
    
    }
}
